# -*- coding: utf-8 -*-
"""heart_live_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGiFSqmxuKR2BX_zI5go6D8HUNl2wCHh
"""

import pandas as pd
import numpy as np
import joblib

# Function to preprocess a single raw datapoint
def preprocess_raw_data(raw_data, columns):
    # Raw data has 11 columns, excluding Age_Cholesterol
    input_columns = columns[:-1]  # Exclude Age_Cholesterol from input
    df = pd.DataFrame([raw_data], columns=input_columns)  # 1 row, 11 columns
    df_scaled = df.copy()

    # Preprocess Sex: Male/M -> 1, Female/F -> 0
    df_scaled['Sex'] = df['Sex'].apply(lambda x: 1 if str(x).lower() in ['male', 'm'] else 0 if str(x).lower() in ['female', 'f'] else x)

    # Scale other columns
    for col in ['Age', 'Cholesterol', 'Triglycerides', 'Systolic', 'Diastolic', 'BMI', 'Exercise_Hours_Per_Week', 'Heart_Rate']:
        if col == 'Age':
            df_scaled[col] = df[col] / 100  # Age 0-100 -> 0-1
        elif col in ['Cholesterol', 'Triglycerides']:
            df_scaled[col] = (df[col] - 100) / 200  # 100-300 -> 0-1
        elif col in ['Systolic', 'Diastolic']:
            df_scaled[col] = (df[col] - 50) / 150  # 50-200 -> 0-1
        elif col == 'BMI':
            df_scaled[col] = (df[col] - 15) / 35  # 15-50 -> 0-1
        elif col == 'Exercise_Hours_Per_Week':
            df_scaled[col] = df[col] / 20  # 0-20 -> 0-1
        elif col == 'Heart_Rate':
            df_scaled[col] = (df[col] - 40) / 80  # 40-120 -> 0-1

    # Add Age_Cholesterol during preprocessing
    df_scaled['Age_Cholesterol'] = df_scaled['Age'] * df_scaled['Cholesterol']
    return df_scaled

def outside_file_predict(data, path):
    input_data = data
    path = path

    # Load the model
    model = joblib.load(path)
    print("Model loaded successfully")

    # Define column names (Age_Cholesterol still included for model compatibility)
    columns = ['Age', 'Sex', 'Cholesterol', 'Triglycerides', 'Systolic', 'Diastolic',
               'BMI', 'Smoking', 'Diabetes', 'Exercise_Hours_Per_Week', 'Heart_Rate', 'Age_Cholesterol']

    data_scaled = preprocess_raw_data(data, columns)
    proba = model.predict_proba(data_scaled)[:, 1][0]
    prediction = int(proba >= 0.45)

    # Output result
    result = "Heart Attack" if prediction else "No Heart Attack"
    if prediction:
        return 1
    else:
        return 0


# Example usage (optional, uncomment to test)
# raw_data = [45, 'Male', 240, 200, 140, 90, 30, 1, 0, 5, 85]  # 11 values
# outside_file_predict(raw_data, 'logistic_pipeline.pkl')

'''result =outside_file_predict(single_data_raw, '/content/drive/MyDrive/logistic_pipeline_with_heart_rate.pkl')

#result = "Heart Attack" if prediction else "No Heart Attack"
print(f"\nResult: {result}")'''

'''# Fake test data (11 columns each, matching input expectations)
test_cases = [
    [55, 'Male', 250, 220, 145, 92, 32, 1, 1, 3, 88],    # High risk: older, smoker, diabetic, high BPM
    [28, 'Female', 160, 110, 105, 65, 22, 0, 0, 12, 62], # Low risk: young, healthy, low BPM
    [62, 'Male', 270, 240, 155, 98, 36, 1, 0, 4, 90],    # High risk: older, high metrics, high BPM
    [35, 'Female', 180, 130, 115, 72, 24, 0, 0, 10, 68], # Low risk: moderate metrics, normal BPM
    [np.nan, 'Male', 200, 150, 130, 85, 28, 0, 0, 8, 70] # Edge case: missing Age, moderate risk
]

# Test each case
print("Testing Fake Data with Model:")
for i, test_case in enumerate(test_cases, 1):
    print(f"\nTest Case {i}: {test_case}")
    prediction = outside_file_predict(test_case, '/content/drive/MyDrive/logistic_pipeline_with_heart_rate.pkl')
    print(f"Prediction Result: {prediction} (1 = Heart Attack, 0 = No Heart Attack)")'''